#!/usr/bin/env python2

#python2 because the pwntools are still broken with python3

from pwn import *
import string

mappings = {}
d = {}

r = remote("chal.tuctf.com", 30102)
letters = ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', 'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'z', 'x', 'c', 'v', 'b', 'n', 'm']

# level 0 ~ level 4
for i in range(5):
    r.recvuntil("text:")
    r.sendline("qwertyuiopasdfghjklzxcvbnm")
    r.recvuntil("is ")

    tokens = r.recvuntil("\n").replace("\n", "").split(" ")
    d = {x[0]:x[1] for x in zip(tokens, letters)}

    print("\n----------Level {}----------".format(i))
    print("New mappings:")
    print(d)
    print("")

    for _ in range(50):
        r.recvuntil("Decrypt ")

        ctx = r.recvuntil("\n").replace("\n", "").split(" ")
        ptx = ""

        for c in ctx:
            ptx += d[c]

        print("sending {}".format(ptx))

        r.sendline(ptx)

# level 5
r.recvuntil("text:")
r.sendline("a"*8 + "b"*8 + "c"*8 + "d"*8 + "e"*8 + "f"*8 + "g"*8 + "h"*8 + "i"*8 + "j"*8 + "k"*8 + "l"*8 + "m"*8 + "n"*8 + "o"*8 + "p"*8 + "q"*8 + "r"*8 + "s"*8 + "t"*8 + "u"*8 + "v"*8 + "w"*8 + "x"*8 + "y"*8 + "z"*8)
r.recvuntil("is ")

tokens = r.recvuntil("\n").replace("\n", "").split(" ")
d = {}

for letter in string.ascii_lowercase:
    d[letter] = tokens[0:8]
    if len(tokens) >= 8:
        tokens = tokens[8:]

s = set()

for k,v in d.items():
    for tmp in v:
        s.add(tmp)

mappings = {symbol:{} for symbol in s}

for symbol in s:
    for k,v in d.items():
        for i in range(8):
            if symbol == v[i]:
                mappings[symbol][i] = k

print("\n----------Level 5----------")
print("New mappings:")
print(mappings)
print("")

for _ in range(50):
    r.recvuntil("Decrypt ")

    ctx = r.recvuntil("\n").replace("\n", "").split(" ")
    ptx = ""

    for i in range(len(ctx)):
        c = ctx[i]
        i = i % 8
        ptx += mappings[c][i]

    print("sending {}".format(ptx))

    r.sendline(ptx)

# level 6
r.recvuntil("text:")

# the string that gets sent is not relevant for this level
r.sendline("pippogoofy")
r.recvuntil("is ")

# the received string is not relevant for this level
tokens = r.recvuntil("\n").replace("\n", "").split(" ")
mappings = {"_|": "a", "|_|": "b", "|_": "c", "]": "d", "[]": "e", "[": "f", "-|": "g", "|-|": "h", "|-": "i", "._|": "j", "|._|": "k", "|._": "l", ".]": "m", "[.]": "n", "[.": "o", ".-|": "p", "|.-|": "q", "|.-": "r", "v": "s", ">": "t", "<": "u", "^": "v", ".v": "w", ".>": "x", ".<": "y", ".^": "z"}

print("\n----------Level 6----------")
print("Strategy and new mappings:")
print("Apply the scrambling to the ctx until the new ctx is equal to the original ctx.")
print("Then take the ctx before the last scramble and apply:")
print(mappings)
print("")

for _ in range(50):
    r.recvuntil("Decrypt ")

    ctx = r.recvuntil("\n").replace("\n", "").split(" ")
    ctx_backup = ctx
    ptx = ""

    while True:
        new_ctx = []
        added = []

        counter = 0

        while len(new_ctx) < len(ctx):
            if counter == 0:
                new_ctx.append(ctx[counter])
                added.append(counter)
                counter += 4
                continue

            if counter < len(ctx):
                if counter not in added:
                    new_ctx.append(ctx[counter])
                    added.append(counter)
                    counter += 4
                    continue

            counter = -1

            for i in range(len(ctx)):
                if i not in added:
                    counter = i
                    break

        old_ctx = ctx
        ctx = new_ctx

        if ctx == ctx_backup:
            ctx = old_ctx
            break

    for c in ctx:
        ptx += mappings[c]

    print("sending {}".format(ptx))
    r.sendline(ptx)

# level 7
r.recvuntil("text:")
r.sendline("qwertyuiopasdfghjklzxcvbnm")
r.recvuntil("is ")

tokens = r.recvuntil("\n").replace("\n", "").split(" ")
d = {x[0]:x[1] for x in zip(tokens, letters)}

print("\n----------Level 7----------")
print("New mappings:")
print(d)
print("")

for _ in range(50):
    r.recvuntil("Decrypt ")

    ctx = r.recvuntil("\n").replace("\n", "").split(" ")
    ptx = ""

    for c in ctx:
        ptx += d[c]

    print("sending {}".format(ptx))

    r.sendline(ptx)

# level 8
r.recvuntil("text:")
r.sendline("a"*7 + "b"*7 + "c"*7 + "d"*7 + "e"*7 + "f"*7 + "g"*7 + "h"*7 + "i"*7 + "j"*7 + "k"*7 + "l"*7 + "m"*7 + "n"*7 + "o"*7 + "p"*7 + "q"*7 + "r"*7 + "s"*7 + "t"*7 + "u"*7 + "v"*7 + "w"*7 + "x"*7 + "y"*7 + "z"*7)
r.recvuntil("is ")

tokens = r.recvuntil("\n").replace("\n", "").split(" ")
d = {}

for letter in string.ascii_lowercase:
    d[letter] = tokens[0:7]
    if len(tokens) >= 7:
        tokens = tokens[7:]

s = set()

for k,v in d.items():
    for tmp in v:
        s.add(tmp)

mappings = {symbol:{} for symbol in s}

for symbol in s:
    for k,v in d.items():
        for i in range(7):
            if symbol == v[i]:
                mappings[symbol][i] = k

print("\n----------Level 8----------")
print("New mappings:")
print(mappings)
print("")

for _ in range(50):
    r.recvuntil("Decrypt ")

    ctx = r.recvuntil("\n").replace("\n", "").split(" ")
    ptx = ""

    for i in range(len(ctx)):
        c = ctx[i]
        i = i % 7
        ptx += mappings[c][i]

    print("sending {}".format(ptx))

    r.sendline(ptx)

# level 9
r.recvuntil("text:")

# the string that gets sent is not relevant for this level
r.sendline("pippogoofy")
r.recvuntil("is ")

# the received string is not relevant for this level
tokens = r.recvuntil("\n").replace("\n", "").split(" ")

mappings = {
 '>': 'a',
 ']v.]': 'b',
 '_': 'c',
 '-[': 'd',
 '-': 'e',
 'v_': 'f',
 'v[': 'g',
 ']v.': 'h',
 ']|]': 'i',
 ']|': 'j',
 '|]': 'k',
 '].': 'l',
 '[': 'm',
 '.]': 'n',
 '].]': 'o',
 ']v|]': 'p',
 ']v|': 'q',
 '-v': 'r',
 'v|]': 's',
 '-v[': 't',
 'v.]': 'u',
 '^': 'v',
 '<': 'w',
 'v^': 'x',
 'v>': 'y',
 'v<': 'z'
}

print("\n----------Level 9----------")
print("Strategy and new mappings:")
print("Apply the scrambling to the ctx until the new ctx is equal to the original ctx.")
print("Then take the ctx before the last scramble and apply:")
print(mappings)
print("")

for _ in range(50):
    r.recvuntil("Decrypt ")

    ctx = r.recvuntil("\n").replace("\n", "").split(" ")
    ctx_backup = ctx
    ptx = ""

    while True:
        new_ctx = []
        added = []

        counter = 0

        while len(new_ctx) < len(ctx):
            if counter == 0:
                new_ctx.append(ctx[counter])
                added.append(counter)
                counter += 4
                continue

            if counter < len(ctx):
                if counter not in added:
                    new_ctx.append(ctx[counter])
                    added.append(counter)
                    counter += 4
                    continue

            counter = -1

            for i in range(len(ctx)):
                if i not in added:
                    counter = i
                    break

        old_ctx = ctx
        ctx = new_ctx

        if ctx == ctx_backup:
            ctx = old_ctx
            break

    for c in ctx:
        ptx += mappings[c]

    print("sending {}".format(ptx))
    r.sendline(ptx)

# we get the flag now
print(r.recvuntil("}"))
print(r.recv())

# TUCTF{1nf1n1t3_1s_n0t_4_g00d_n4m3}
# GG
